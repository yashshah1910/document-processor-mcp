/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import * as shared from "../shared/index.js";
/** @internal */
export const PartitionRequest$inboundSchema = z.object({
    partition_parameters: shared.PartitionParameters$inboundSchema,
    "unstructured-api-key": z.nullable(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        "partition_parameters": "partitionParameters",
        "unstructured-api-key": "unstructuredApiKey",
    });
});
/** @internal */
export const PartitionRequest$outboundSchema = z.object({
    partitionParameters: shared.PartitionParameters$outboundSchema,
    unstructuredApiKey: z.nullable(z.string()).optional(),
}).transform((v) => {
    return remap$(v, {
        partitionParameters: "partition_parameters",
        unstructuredApiKey: "unstructured-api-key",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartitionRequest$;
(function (PartitionRequest$) {
    /** @deprecated use `PartitionRequest$inboundSchema` instead. */
    PartitionRequest$.inboundSchema = PartitionRequest$inboundSchema;
    /** @deprecated use `PartitionRequest$outboundSchema` instead. */
    PartitionRequest$.outboundSchema = PartitionRequest$outboundSchema;
})(PartitionRequest$ || (PartitionRequest$ = {}));
export function partitionRequestToJSON(partitionRequest) {
    return JSON.stringify(PartitionRequest$outboundSchema.parse(partitionRequest));
}
export function partitionRequestFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PartitionRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartitionRequest' from JSON`);
}
/** @internal */
export const PartitionResponse$inboundSchema = z.union([z.string(), z.array(z.record(z.any()))]);
/** @internal */
export const PartitionResponse$outboundSchema = z.union([z.string(), z.array(z.record(z.any()))]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export var PartitionResponse$;
(function (PartitionResponse$) {
    /** @deprecated use `PartitionResponse$inboundSchema` instead. */
    PartitionResponse$.inboundSchema = PartitionResponse$inboundSchema;
    /** @deprecated use `PartitionResponse$outboundSchema` instead. */
    PartitionResponse$.outboundSchema = PartitionResponse$outboundSchema;
})(PartitionResponse$ || (PartitionResponse$ = {}));
export function partitionResponseToJSON(partitionResponse) {
    return JSON.stringify(PartitionResponse$outboundSchema.parse(partitionResponse));
}
export function partitionResponseFromJSON(jsonString) {
    return safeParse(jsonString, (x) => PartitionResponse$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'PartitionResponse' from JSON`);
}
//# sourceMappingURL=partition.js.map